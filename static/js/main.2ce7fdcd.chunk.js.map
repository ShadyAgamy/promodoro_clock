{"version":3,"sources":["components/App.js","index.js"],"names":["formattedNumber","number","toLocaleString","minimumIntegerDigits","useGrouping","App","useState","breakLength","setBreakLength","breakMins","setBreakMins","breakSecs","setBreakSesc","sessionLength","setSessionLength","sessionMins","setSessionMins","sessionSecs","setSessionSesc","startTimer","setStartTimer","runBreak","setRunBreak","secondsToCircularTimer","setSecondsToCircularTimer","key","setKey","audio","useRef","unitDecreament","unit","updateValue","unitIncrement","useEffect","prevKey","timer","setInterval","current","play","clearInterval","console","log","className","id","ref","src","type","onClick","icon","faArrowLeft","faArrowRight","isPlaying","duration","colors","trailColor","size","strokeWidth","remainingTime","minutes","Math","floor","seconds","remainingTimeToMinAndSec","faPlay","faStop","pause","currentTime","faRotateLeft","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.2ce7fdcd.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faArrowLeft,\r\n  faArrowRight,\r\n  faPlay,\r\n  faStop,\r\n  faRotateLeft,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./styles.scss\";\r\n\r\n// formate one number to two digits formats e.g 1 => 01\r\nlet formattedNumber = (number) =>\r\n  number.toLocaleString(\"en-US\", {\r\n    minimumIntegerDigits: 2,\r\n    useGrouping: false,\r\n  });\r\n\r\nexport default function App() {\r\n  const [breakLength, setBreakLength] = useState(5);\r\n  const [breakMins, setBreakMins] = useState(breakLength);\r\n  const [breakSecs, setBreakSesc] = useState(0);\r\n  const [sessionLength, setSessionLength] = useState(25);\r\n  const [sessionMins, setSessionMins] = useState(sessionLength);\r\n  const [sessionSecs, setSessionSesc] = useState(0);\r\n\r\n  const [startTimer, setStartTimer] = useState(false);\r\n  const [runBreak, setRunBreak] = useState(false);\r\n\r\n  const [secondsToCircularTimer, setSecondsToCircularTimer] = useState(\r\n    sessionMins * 60 + sessionSecs\r\n  );\r\n\r\n  const [key, setKey] = useState(0);\r\n\r\n  const audio = useRef(null);\r\n\r\n  const unitDecreament = (unit, updateValue) => {\r\n    unit === 1 ? updateValue(1) : updateValue(unit - 1);\r\n  };\r\n  const unitIncrement = (unit, updateValue) => {\r\n    unit === 60 ? updateValue(60) : updateValue(unit + 1);\r\n  };\r\n\r\n  const reset = () => {\r\n    setBreakLength(5);\r\n    setSessionLength(25);\r\n    setRunBreak(false);\r\n    setStartTimer(false);\r\n    setSessionMins(sessionLength);\r\n    setSessionSesc(0);\r\n    setBreakMins(breakLength);\r\n    setBreakSesc(0);\r\n    audio.current.pause();\r\n    audio.current.currentTime = 0;\r\n  };\r\n\r\n  // update session minutes and seconds when session length changes\r\n  useEffect(() => {\r\n    setSessionMins(sessionLength);\r\n    setSessionSesc(0);\r\n    if (!runBreak) {\r\n      setSecondsToCircularTimer(sessionLength * 60);\r\n      setKey((prevKey) => prevKey + 1);\r\n    }\r\n  }, [sessionLength, runBreak]);\r\n\r\n  // update break minutes and seconds when session length changes\r\n  useEffect(() => {\r\n    setBreakMins(breakLength);\r\n    setBreakSesc(0);\r\n  }, [breakLength]);\r\n\r\n  // update circular progress time when break starts\r\n  useEffect(() => {\r\n    if (runBreak) {\r\n      setSecondsToCircularTimer(breakLength * 60);\r\n      setKey((prevKey) => prevKey + 1);\r\n    }\r\n  }, [breakLength, runBreak]);\r\n\r\n  // Session timer\r\n  useEffect(() => {\r\n    let timer;\r\n    if (startTimer) {\r\n      timer = setInterval(() => {\r\n        if (sessionMins === 0 && sessionSecs === 1) {\r\n          audio.current.play();\r\n        }\r\n        if (sessionMins === 0 && sessionSecs === 0) {\r\n          if (!runBreak) {\r\n            setBreakMins(breakLength);\r\n            setBreakSesc(0);\r\n          }\r\n          setRunBreak(true);\r\n          clearInterval(timer);\r\n        } else {\r\n          if (sessionSecs === 0) {\r\n            setSessionSesc(59);\r\n            setSessionMins(sessionMins - 1);\r\n          } else {\r\n            setSessionSesc(sessionSecs - 1);\r\n          }\r\n        }\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(timer);\r\n    }\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, [breakLength, runBreak, sessionMins, sessionSecs, startTimer]);\r\n\r\n  // Break timer\r\n  useEffect(() => {\r\n    let timer;\r\n    if (startTimer && runBreak) {\r\n      timer = setInterval(() => {\r\n        if (breakMins === 0 && breakSecs === 0) {\r\n          audio.current.play();\r\n        }\r\n        if (breakMins === 0 && breakSecs === 0) {\r\n          setSessionMins(sessionLength);\r\n          setSessionSesc(0);\r\n          setRunBreak(false);\r\n          clearInterval(timer);\r\n        } else {\r\n          if (breakSecs === 0) {\r\n            setBreakMins(breakMins - 1);\r\n            setBreakSesc(59);\r\n          } else {\r\n            setBreakSesc(breakSecs - 1);\r\n          }\r\n        }\r\n      }, 1000);\r\n    }\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, [breakMins, breakSecs, runBreak, sessionLength, startTimer]);\r\n\r\n  const remainingTimeToMinAndSec = (remainingTime) => {\r\n    const minutes = Math.floor(remainingTime / 60);\r\n    const seconds = remainingTime % 60;\r\n    return `${formattedNumber(minutes)}:${formattedNumber(seconds)}`;\r\n  };\r\n\r\n\r\n  console.log({sessionSecs})\r\n\r\n  return (\r\n    <div className=\"promodoro_container\">\r\n      <audio id=\"beep\" ref={audio}>\r\n        <source\r\n          src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\r\n          type=\"audio/mpeg\"\r\n        />\r\n      </audio>\r\n      <div className=\"clock_length_control\">\r\n        <div className=\"break_length\">\r\n          <h4 id=\"break-label\">Break Length</h4>\r\n          <div className=\"length_control_container\">\r\n            <span id=\"break-decrement\" onClick={() => unitDecreament(breakLength, setBreakLength)}>\r\n              <FontAwesomeIcon icon={faArrowLeft} />\r\n            </span>\r\n            <span id=\"break-length\">{breakLength}</span>\r\n            <span id=\"break-increment\" onClick={() => unitIncrement(breakLength, setBreakLength)}>\r\n              <FontAwesomeIcon icon={faArrowRight} />\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"session_length\">\r\n          <h4 id=\"session-label\">Session Length</h4>\r\n          <div className=\"length_control_container\">\r\n            <span\r\n              id=\"session-decrement\"\r\n              onClick={() => unitDecreament(sessionLength, setSessionLength)}\r\n            >\r\n              <FontAwesomeIcon icon={faArrowLeft} />\r\n            </span>\r\n            <span id=\"session-length\">{sessionLength}</span>\r\n            <span\r\n              id=\"session-increment\"\r\n              onClick={() => unitIncrement(sessionLength, setSessionLength)}\r\n            >\r\n              <FontAwesomeIcon icon={faArrowRight} />\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"session_box\">\r\n        <h4 id=\"timer-label\">{runBreak ? \"Break time\" : \"Session time\"}</h4>\r\n        {/* <span >\r\n            {runBreak\r\n              ? `${formattedNumber(breakMins)}:${formattedNumber(breakSecs)}`\r\n              : `${formattedNumber(sessionMins)}:${formattedNumber(sessionSecs)}`}\r\n          </span> */}\r\n        <div className=\"timeLeft\">\r\n          <CountdownCircleTimer\r\n            key={key}\r\n            isPlaying={startTimer}\r\n            duration={secondsToCircularTimer}\r\n            colors={[\"#6FF3FA\"]}\r\n            trailColor={\"#1F2141\"}\r\n            size={300}\r\n            strokeWidth={6}\r\n          >\r\n            {({ remainingTime }) => remainingTimeToMinAndSec(remainingTime)}\r\n          </CountdownCircleTimer>\r\n        </div>\r\n      </div>\r\n      <div className=\"timerControl\">\r\n        <span id=\"start_stop\" onClick={() => setStartTimer(!startTimer)}>\r\n          <FontAwesomeIcon icon={faPlay} />\r\n          <FontAwesomeIcon icon={faStop} />\r\n        </span>\r\n        <span id=\"reset\" onClick={reset}>\r\n          <FontAwesomeIcon icon={faRotateLeft} />\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './components/App';\r\n\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}